// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/v1/bmc.proto

package v1

import (
	fmt "fmt"
	math "math"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *NetworkSourceRequest) Validate() error {
	if this.Authn != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Authn); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Authn", err)
		}
	}
	if this.Vendor != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Vendor); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Vendor", err)
		}
	}
	if _, ok := NetworkSource_name[int32(this.NetworkSource)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("NetworkSource", fmt.Errorf(`value '%v' must be a valid NetworkSource field`, this.NetworkSource))
	}
	return nil
}
func (this *NetworkSourceResponse) Validate() error {
	return nil
}
func (this *ResetRequest) Validate() error {
	if this.Authn != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Authn); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Authn", err)
		}
	}
	if this.Vendor != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Vendor); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Vendor", err)
		}
	}
	if _, ok := ResetKind_name[int32(this.ResetKind)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("ResetKind", fmt.Errorf(`value '%v' must be a valid ResetKind field`, this.ResetKind))
	}
	return nil
}
func (this *ResetResponse) Validate() error {
	return nil
}
func (this *UserCreds) Validate() error {
	if this.Username == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Username", fmt.Errorf(`value '%v' must not be an empty string`, this.Username))
	}
	if this.Password == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Password", fmt.Errorf(`value '%v' must not be an empty string`, this.Password))
	}
	if _, ok := UserRole_name[int32(this.UserRole)]; !ok {
		return github_com_mwitkow_go_proto_validators.FieldError("UserRole", fmt.Errorf(`value '%v' must be a valid UserRole field`, this.UserRole))
	}
	return nil
}
func (this *CreateUserRequest) Validate() error {
	if this.Authn != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Authn); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Authn", err)
		}
	}
	if this.Vendor != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Vendor); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Vendor", err)
		}
	}
	if this.UserCreds != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UserCreds); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UserCreds", err)
		}
	}
	return nil
}
func (this *CreateUserResponse) Validate() error {
	return nil
}
func (this *DeleteUserRequest) Validate() error {
	if this.Authn != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Authn); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Authn", err)
		}
	}
	if this.Vendor != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Vendor); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Vendor", err)
		}
	}
	if this.Username == "" {
		return github_com_mwitkow_go_proto_validators.FieldError("Username", fmt.Errorf(`value '%v' must not be an empty string`, this.Username))
	}
	return nil
}
func (this *DeleteUserResponse) Validate() error {
	return nil
}
func (this *UpdateUserRequest) Validate() error {
	if this.Authn != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Authn); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Authn", err)
		}
	}
	if this.Vendor != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Vendor); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Vendor", err)
		}
	}
	if this.UserCreds != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UserCreds); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UserCreds", err)
		}
	}
	return nil
}
func (this *UpdateUserResponse) Validate() error {
	return nil
}
func (this *DeactivateSOLRequest) Validate() error {
	if this.Authn != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Authn); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Authn", err)
		}
	}
	if this.Vendor != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Vendor); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Vendor", err)
		}
	}
	return nil
}
func (this *DeactivateSOLResponse) Validate() error {
	return nil
}
